#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>

#define uint8 unsigned char
#define uint16 unsigned short int
#define uint32 unsigned int
#define sint32 int
#define uint64 unsigned long long int
#define sint64 long long int
#define boolean unsigned char
#define TRUE 1
#define FALSE 0
#define MAX(x,y) (((x)>(y))?(x):(y))
#define MIN(x,y) (((x)<(y))?(x):(y))

#define FROM(s) (((s) >> 6) & 077)
#define TO(s) ((s) & 077)
#define Rank(x) ((x)>>3)
#define File(x) ((x)&7)
#define SWAP(x,y) {(x)^=(y); (y)^=(x); (x)^=(y);}

#define TB_DIR "LCTB"
#define USE_EP_CODE TRUE

/* #define DIV(a,b) ((a)/(b)) */
#define DIV(X,a,b) \
  { if ((b) == 1) X = (a); \
  else if ((b) == 10) X = (a) / 10; \
  else if ((b) == 12) X = (a) / 12; \
  else if ((b) == 24) X = (a) / 24; \
  else if ((b) == 40) X = (a) / 40; \
  else if ((b) == 48) X = (a) / 48; \
  else if ((b) == 64) X = (a) / 64; \
  else if ((b) == 780) X = (a) / 780; \
  else if ((b) == 1128) X = (a) / 1128; \
  else if ((b) == 2016) X = (a) / 2016; \
  else if ((b) == 9880) X = (a) / 9880; \
  else if ((b) == 17296) X = (a) / 17296; \
  else if ((b) == 41664) X = (a) / 41664; \
  else if ((b) == 91390) X = (a) / 91390; \
  else if ((b) == 194580) X = (a) / 194580; \
  else if ((b) == 635376) X = (a) / 635376; }

uint8 lanc_oriz[64], lanc_vert[64], lanc_diag[64];


uint16 REP2[64][64];
uint16 REP3[64][64][64];
uint32 REP4[64][64][64][64];
// uint32 REP5[64][64][64][64][64];

uint16 UNDO_REP2Z[780], UNDO_REP2P[1128], UNDO_REP2[2016];
uint32 UNDO_REP3Z[9880], UNDO_REP3P[17296], UNDO_REP3[41664];
uint32 UNDO_REP4Z[91390], UNDO_REP4P[194580], UNDO_REP4[635376];

typedef struct
{uint8 pi[6],sq[6]; boolean wtm,pawn; uint8 n,ep;
 uint64 Blocked,Occupied; uint64 index,reflect;}
type_PiSq;

#define MAXIMUM_PLY 256
typedef struct
{
  /* 0x00-0x07 */ uint64 HASH;
  /* 0x08-0x0b */ uint8 ep, cp; uint16 rev; // doh, had a bug with 0x100 rev!
  /* 0x0c-0x0f */ uint16 k1, mv;
} typeDYNAMIC;

#define OCCUPIED OccupiedBW

typedef struct {uint64 key; uint32 node;} HASH;
struct TP
{uint8 sq[64]; uint64 OCCUPIED; uint64 bitboard[14]; uint64 tb_hits;
 uint8 wtm, height; typeDYNAMIC *DYN, *DYN_ROOT; HASH *ZTAB;};
typedef struct TP typePOS; // note that Get_TB_Score needs this to be congruent

typedef enum
  { wEnumOcc, wEnumP, wEnumN, wEnumB, wEnumR, wEnumQ, wEnumK,
    bEnumOcc, bEnumP, bEnumN, bEnumB, bEnumR, bEnumQ, bEnumK} EnumPieces;
typedef enum
  { A1, B1, C1, D1, E1, F1, G1, H1, A2, B2, C2, D2, E2, F2, G2, H2,
    A3, B3, C3, D3, E3, F3, G3, H3, A4, B4, C4, D4, E4, F4, G4, H4,
    A5, B5, C5, D5, E5, F5, G5, H5, A6, B6, C6, D6, E6, F6, G6, H6,
    A7, B7, C7, D7, E7, F7, G7, H7, A8, B8, C8, D8, E8, F8, G8, H8
  } EnumSquares;
typedef enum { R1, R2, R3, R4, R5, R6, R7, R8 } EnumRanks;
typedef enum { FA, FB, FC, FD, FE, FF, FG, FH } EnumFiles;

#define wBitboardK POSITION->bitboard[wEnumK]
#define wBitboardQ POSITION->bitboard[wEnumQ]
#define wBitboardR POSITION->bitboard[wEnumR]
#define wBitboardB POSITION->bitboard[wEnumB]
#define wBitboardN POSITION->bitboard[wEnumN]
#define wBitboardP POSITION->bitboard[wEnumP]
#define wBitboardOcc POSITION->bitboard[wEnumOcc]
#define bBitboardK POSITION->bitboard[bEnumK]
#define bBitboardQ POSITION->bitboard[bEnumQ]
#define bBitboardR POSITION->bitboard[bEnumR]
#define bBitboardB POSITION->bitboard[bEnumB]
#define bBitboardN POSITION->bitboard[bEnumN]
#define bBitboardP POSITION->bitboard[bEnumP]
#define bBitboardOcc POSITION->bitboard[bEnumOcc]

#define BlockedPawn 7
typedef struct
{uint64 m[6];
 uint8 *DATA, *MARKED, *WON, *LOST, *FLAT;
 uint8 p[6], rep[6];
 uint64 size, PawnMult, size8, supp;
 int num, massimo_rima, shift, num_indici;
 uint32 *indici, BLOCCO_pro, BWT; /* 32-bit indici? */
 boolean pawn_flag, simm, MEMORIA, TYPE, is_uno;
 FILE *Fdata, *Fsupp;
 int *rima_pro, *vit_pro, *per_pro, *mar_pro;
 uint32 supp_indice[8];
 char DIR_NOME[256];
 char string[256];
} TableBase;

#define MAX_MOVE_COUNT 125
#define BROKEN_VALUE (MAX_MOVE_COUNT + 1)
#define UNKNOWN_VALUE (MAX_MOVE_COUNT + 2)
#define IS_WIN (MAX_MOVE_COUNT + 3)
#define IS_DRAW (MAX_MOVE_COUNT + 4)
#define CAPTURE_WIN (MAX_MOVE_COUNT + 5)
#define CAPTURE_DRAW (MAX_MOVE_COUNT + 6)
#define CAPTURE_LOSS (MAX_MOVE_COUNT + 7)
#define FIRST_LOSS (MAX_MOVE_COUNT + 8)
#define LOST_IN(x) (FIRST_LOSS + (x))
#define LARGH (240 - MAX_MOVE_COUNT)
#define PERD_FINE ((FIRST_LOSS) + (LARGH))

#define dBROKEN 0x00
#define dWIN 0x01
#define dDRAW 0x02
#define dLOST0 (dDRAW + 1)
#define DISK_SCORE_IS_WIN(x) ((x) == dWIN)
#define DISK_SCORE_IS_DRAW(x) ((x) == dDRAW)
#define DISK_SCORE_IS_LOSS(x) ((x) >= dLOST0)

#define IsMarked(A,w) (A[(w) >> 3] & (1 << ((w) & 7)))
#define emarco(A,w) (A[(w) >> 3] & (1 << ((w) & 7)))
#define Set(A,w) (A[(w) >> 3] |= (1 << ((w) & 7)))
#define UnSet(A,w) (A[(w) >> 3] &= ~(1 << ((w) & 7)))

typedef struct { uint64 mask, mult, shift; uint64* index; } type_MM;
#define AttRocc(sq, OCC) ROOK_MM[sq].index\
  [((OCC & ROOK_MM[sq].mask) * ROOK_MM[sq].mult) >> ROOK_MM[sq].shift]
#define AttBocc(sq, OCC) BISHOP_MM[sq].index\
  [((OCC & BISHOP_MM[sq].mask) * BISHOP_MM[sq].mult) >> BISHOP_MM[sq].shift]
#define AttB(sq) AttBocc (sq, POSITION->OCCUPIED)
#define AttR(sq) AttRocc (sq, POSITION->OCCUPIED)
#define AttQ(fr) (AttR(fr) | AttB(fr))

uint64 AttN[64], AttK[64], SqSet[64];
type_MM ROOK_MM[64], BISHOP_MM[64];
uint64 MM_ORTHO[102400], MM_DIAG[5248];
#define POS POSITION
#define FILE(x) File(x)
#define RANK(x) Rank(x)
#define ABS(x) (( (x) >= 0) ? (x) : -(x))
#define FileDistance(x, y) (ABS (FILE (x) - FILE (y)))
#define RankDistance(x, y) (ABS (RANK (x) - RANK (y)))
#define FILEa 0x0101010101010101ULL
#define FILEh 0x8080808080808080ULL
#define FlagEP (1 << 15)
static inline int BSF (uint64 w)
{uint64 x; asm ("bsfq %1,%0\n": "=&r" (x):"r" (w)); return x;}
static inline int BSR (uint64 w)
{uint64 x; asm ("bsrq %1,%0\n": "=&r" (x):"r" (w)); return x;}

#define AttRocc(sq, OCC) ROOK_MM[sq].index\
  [((OCC & ROOK_MM[sq].mask) * ROOK_MM[sq].mult) >> ROOK_MM[sq].shift]
#define AttBocc(sq, OCC) BISHOP_MM[sq].index\
  [((OCC & BISHOP_MM[sq].mask) * BISHOP_MM[sq].mult) >> BISHOP_MM[sq].shift]
#define AttB(sq) AttBocc (sq, POSITION->OCCUPIED)
#define AttR(sq) AttRocc (sq, POSITION->OCCUPIED)
#define AttQ(fr) (AttR(fr) | AttB(fr))

uint32 TB_LOOKUP[14][14][14][14][14][14];
TableBase TB_TABLE[0x4000];
uint32 NUM_TBS;

uint8 GRP_ACT[8][64];
uint8 KEY_MAP[64],KEY_MAP2[64][64];

uint64 BINOMIAL(int x,int y);
uint32 TB_CACHE_SIZE; // mb
char COMPRESSION_PREFIX[256];
boolean NOW_DEBUG;
int TB_INIT;

int TB_lookup(char *I);
void add_TB(TableBase *tb,char *I,char *D);
void RemoveTB(TableBase *tb);
boolean RegisterTB4(char *NAME,char *DIREC);
boolean RegisterTB5(char *NAME,char *DIREC);
void magic_mult_init();
void BITBOARD(typePOS *POSITION,type_PiSq *PiSq);
void init_stuff();
boolean get_index(type_PiSq *PiSq,int *tb_num,uint64 *ind,uint64* reflect);
int canonical_name(char *A);
void load_tbs(char *D);
void symm(char *O,char *I);
int GenMoveList (typePOS *POS,uint16 *ml,uint64 *EP);
uint32 MakePiSqCap(type_PiSq *PiSq,uint16 mv);
uint32 MakePiSqProm(type_PiSq *PiSq,uint16 mv);
uint32 MakePiSqPlain(type_PiSq *PiSq,uint16 mv);
void UndoPiSqCap(type_PiSq *PiSq,uint32 mv);
void UndoPiSqProm(type_PiSq *PiSq,uint32 mv);
void UndoPiSqPlain(type_PiSq *PiSq,uint32 mv);
boolean TB_PiSq_score(type_PiSq *PiSq,uint8 *v);
void setup_tb(TableBase *tb);
uint64 GetClock ();
void compress_tb(TableBase *tb);
uint64 loop_remaining(TableBase *tb1,int iter,TableBase *tb2);
uint64 loop_marked(TableBase *tb1,int iter,TableBase *tb2);
int DecompressBlock (unsigned char* O, unsigned char* I, int lun);
uint8 TB_value (TableBase* tb, uint64 ind);
void DUMP_PISQ(type_PiSq *PiSq);
void InitInitTotalBaseCache (uint64 mb);
boolean Get_TB_Score(typePOS *POS,uint8 *va,boolean flat);

////////////////////////////////////////////////////////////////////////

#ifdef NEED_TB_ARRAYS // keep compiler warnings happy
static uint8 color_switch[14]={0,8,9,10,11,12,13,7,1,2,3,4,5,6};
#define X 0xff
static uint8 MAP24[48]=
{0,1,2,3,X,X,X,X,4,5,6,7,X,X,X,X,8,9,10,11,X,X,X,X,12,13,14,15,X,X,X,X,
 16,17,18,19,X,X,X,X,20,21,22,23,X,X,X,X};
static uint8 MAP32[64]=
{0,1,2,3,X,X,X,X,4,5,6,7,X,X,X,X,8,9,10,11,X,X,X,X,12,13,14,15,X,X,X,X,
 16,17,18,19,X,X,X,X,20,21,22,23,X,X,X,X,
 24,25,26,27,X,X,X,X,28,29,30,31,X,X,X,X};
static uint8 MAP10[32]=
{0,1,2,3,X,X,X,X, X,4,5,6,X,X,X,X, X,X,7,8,X,X,X,X, X,X,X,9,X,X,X,X};
#undef X
#endif

uint16 MAP2_32[64][64];
uint16 MAP2_24[64][64];
uint16 MAP2_10[64][64];

uint16 UNMAP2_32[4096];
uint16 UNMAP2_24[4096];
uint16 UNMAP2_10[279];
uint8 ROTATOR2[64][64];

#ifdef NEED_TB_720 // keep compiler warnings happy
static uint8 S720[720][6]=
{{1,2,3,4,5,0},{2,3,4,5,0,1},{0,1,2,3,4,5},{3,4,5,0,1,2},{5,0,1,2,3,4},
 {4,5,0,1,2,3},{1,3,2,4,5,0},{2,4,3,5,0,1},{0,2,1,3,4,5},{3,5,4,0,1,2},
 {5,1,0,2,3,4},{4,0,5,1,2,3},{1,4,2,3,5,0},{2,5,3,4,0,1},{0,3,1,2,4,5},
 {3,0,4,5,1,2},{5,2,0,1,3,4},{4,1,5,0,2,3},{1,5,2,3,4,0},{2,0,3,4,5,1},
 {0,4,1,2,3,5},{3,1,4,5,0,2},{5,3,0,1,2,4},{4,2,5,0,1,3},{1,0,2,3,4,5},
 {2,1,3,4,5,0},{0,5,1,2,3,4},{3,2,4,5,0,1},{5,4,0,1,2,3},{4,3,5,0,1,2},
 {1,2,4,3,5,0},{2,3,5,4,0,1},{0,1,3,2,4,5},{3,4,0,5,1,2},{5,0,2,1,3,4},
 {4,5,1,0,2,3},{1,3,4,2,5,0},{2,4,5,3,0,1},{0,2,3,1,4,5},{3,5,0,4,1,2},
 {5,1,2,0,3,4},{4,0,1,5,2,3},{1,4,3,2,5,0},{2,5,4,3,0,1},{0,3,2,1,4,5},
 {3,0,5,4,1,2},{5,2,1,0,3,4},{4,1,0,5,2,3},{1,5,3,2,4,0},{2,0,4,3,5,1},
 {0,4,2,1,3,5},{3,1,5,4,0,2},{5,3,1,0,2,4},{4,2,0,5,1,3},{1,0,3,2,4,5},
 {2,1,4,3,5,0},{0,5,2,1,3,4},{3,2,5,4,0,1},{5,4,1,0,2,3},{4,3,0,5,1,2},
 {1,2,5,3,4,0},{2,3,0,4,5,1},{0,1,4,2,3,5},{3,4,1,5,0,2},{5,0,3,1,2,4},
 {4,5,2,0,1,3},{1,3,5,2,4,0},{2,4,0,3,5,1},{0,2,4,1,3,5},{3,5,1,4,0,2},
 {5,1,3,0,2,4},{4,0,2,5,1,3},{1,4,5,2,3,0},{2,5,0,3,4,1},{0,3,4,1,2,5},
 {3,0,1,4,5,2},{5,2,3,0,1,4},{4,1,2,5,0,3},{1,5,4,2,3,0},{2,0,5,3,4,1},
 {0,4,3,1,2,5},{3,1,0,4,5,2},{5,3,2,0,1,4},{4,2,1,5,0,3},{1,0,4,2,3,5},
 {2,1,5,3,4,0},{0,5,3,1,2,4},{3,2,0,4,5,1},{5,4,2,0,1,3},{4,3,1,5,0,2},
 {1,2,0,3,4,5},{2,3,1,4,5,0},{0,1,5,2,3,4},{3,4,2,5,0,1},{5,0,4,1,2,3},
 {4,5,3,0,1,2},{1,3,0,2,4,5},{2,4,1,3,5,0},{0,2,5,1,3,4},{3,5,2,4,0,1},
 {5,1,4,0,2,3},{4,0,3,5,1,2},{1,4,0,2,3,5},{2,5,1,3,4,0},{0,3,5,1,2,4},
 {3,0,2,4,5,1},{5,2,4,0,1,3},{4,1,3,5,0,2},{1,5,0,2,3,4},{2,0,1,3,4,5},
 {0,4,5,1,2,3},{3,1,2,4,5,0},{5,3,4,0,1,2},{4,2,3,5,0,1},{1,0,5,2,3,4},
 {2,1,0,3,4,5},{0,5,4,1,2,3},{3,2,1,4,5,0},{5,4,3,0,1,2},{4,3,2,5,0,1},
 {1,2,3,5,4,0},{2,3,4,0,5,1},{0,1,2,4,3,5},{3,4,5,1,0,2},{5,0,1,3,2,4},
 {4,5,0,2,1,3},{1,3,2,5,4,0},{2,4,3,0,5,1},{0,2,1,4,3,5},{3,5,4,1,0,2},
 {5,1,0,3,2,4},{4,0,5,2,1,3},{1,4,2,5,3,0},{2,5,3,0,4,1},{0,3,1,4,2,5},
 {3,0,4,1,5,2},{5,2,0,3,1,4},{4,1,5,2,0,3},{1,5,2,4,3,0},{2,0,3,5,4,1},
 {0,4,1,3,2,5},{3,1,4,0,5,2},{5,3,0,2,1,4},{4,2,5,1,0,3},{1,0,2,4,3,5},
 {2,1,3,5,4,0},{0,5,1,3,2,4},{3,2,4,0,5,1},{5,4,0,2,1,3},{4,3,5,1,0,2},
 {1,2,4,5,3,0},{2,3,5,0,4,1},{0,1,3,4,2,5},{3,4,0,1,5,2},{5,0,2,3,1,4},
 {4,5,1,2,0,3},{1,3,4,5,2,0},{2,4,5,0,3,1},{0,2,3,4,1,5},{3,5,0,1,4,2},
 {5,1,2,3,0,4},{4,0,1,2,5,3},{1,4,3,5,2,0},{2,5,4,0,3,1},{0,3,2,4,1,5},
 {3,0,5,1,4,2},{5,2,1,3,0,4},{4,1,0,2,5,3},{1,5,3,4,2,0},{2,0,4,5,3,1},
 {0,4,2,3,1,5},{3,1,5,0,4,2},{5,3,1,2,0,4},{4,2,0,1,5,3},{1,0,3,4,2,5},
 {2,1,4,5,3,0},{0,5,2,3,1,4},{3,2,5,0,4,1},{5,4,1,2,0,3},{4,3,0,1,5,2},
 {1,2,5,4,3,0},{2,3,0,5,4,1},{0,1,4,3,2,5},{3,4,1,0,5,2},{5,0,3,2,1,4},
 {4,5,2,1,0,3},{1,3,5,4,2,0},{2,4,0,5,3,1},{0,2,4,3,1,5},{3,5,1,0,4,2},
 {5,1,3,2,0,4},{4,0,2,1,5,3},{1,4,5,3,2,0},{2,5,0,4,3,1},{0,3,4,2,1,5},
 {3,0,1,5,4,2},{5,2,3,1,0,4},{4,1,2,0,5,3},{1,5,4,3,2,0},{2,0,5,4,3,1},
 {0,4,3,2,1,5},{3,1,0,5,4,2},{5,3,2,1,0,4},{4,2,1,0,5,3},{1,0,4,3,2,5},
 {2,1,5,4,3,0},{0,5,3,2,1,4},{3,2,0,5,4,1},{5,4,2,1,0,3},{4,3,1,0,5,2},
 {1,2,0,4,3,5},{2,3,1,5,4,0},{0,1,5,3,2,4},{3,4,2,0,5,1},{5,0,4,2,1,3},
 {4,5,3,1,0,2},{1,3,0,4,2,5},{2,4,1,5,3,0},{0,2,5,3,1,4},{3,5,2,0,4,1},
 {5,1,4,2,0,3},{4,0,3,1,5,2},{1,4,0,3,2,5},{2,5,1,4,3,0},{0,3,5,2,1,4},
 {3,0,2,5,4,1},{5,2,4,1,0,3},{4,1,3,0,5,2},{1,5,0,3,2,4},{2,0,1,4,3,5},
 {0,4,5,2,1,3},{3,1,2,5,4,0},{5,3,4,1,0,2},{4,2,3,0,5,1},{1,0,5,3,2,4},
 {2,1,0,4,3,5},{0,5,4,2,1,3},{3,2,1,5,4,0},{5,4,3,1,0,2},{4,3,2,0,5,1},
 {1,2,3,0,4,5},{2,3,4,1,5,0},{0,1,2,5,3,4},{3,4,5,2,0,1},{5,0,1,4,2,3},
 {4,5,0,3,1,2},{1,3,2,0,4,5},{2,4,3,1,5,0},{0,2,1,5,3,4},{3,5,4,2,0,1},
 {5,1,0,4,2,3},{4,0,5,3,1,2},{1,4,2,0,3,5},{2,5,3,1,4,0},{0,3,1,5,2,4},
 {3,0,4,2,5,1},{5,2,0,4,1,3},{4,1,5,3,0,2},{1,5,2,0,3,4},{2,0,3,1,4,5},
 {0,4,1,5,2,3},{3,1,4,2,5,0},{5,3,0,4,1,2},{4,2,5,3,0,1},{1,0,2,5,3,4},
 {2,1,3,0,4,5},{0,5,1,4,2,3},{3,2,4,1,5,0},{5,4,0,3,1,2},{4,3,5,2,0,1},
 {1,2,4,0,3,5},{2,3,5,1,4,0},{0,1,3,5,2,4},{3,4,0,2,5,1},{5,0,2,4,1,3},
 {4,5,1,3,0,2},{1,3,4,0,2,5},{2,4,5,1,3,0},{0,2,3,5,1,4},{3,5,0,2,4,1},
 {5,1,2,4,0,3},{4,0,1,3,5,2},{1,4,3,0,2,5},{2,5,4,1,3,0},{0,3,2,5,1,4},
 {3,0,5,2,4,1},{5,2,1,4,0,3},{4,1,0,3,5,2},{1,5,3,0,2,4},{2,0,4,1,3,5},
 {0,4,2,5,1,3},{3,1,5,2,4,0},{5,3,1,4,0,2},{4,2,0,3,5,1},{1,0,3,5,2,4},
 {2,1,4,0,3,5},{0,5,2,4,1,3},{3,2,5,1,4,0},{5,4,1,3,0,2},{4,3,0,2,5,1},
 {1,2,5,0,3,4},{2,3,0,1,4,5},{0,1,4,5,2,3},{3,4,1,2,5,0},{5,0,3,4,1,2},
 {4,5,2,3,0,1},{1,3,5,0,2,4},{2,4,0,1,3,5},{0,2,4,5,1,3},{3,5,1,2,4,0},
 {5,1,3,4,0,2},{4,0,2,3,5,1},{1,4,5,0,2,3},{2,5,0,1,3,4},{0,3,4,5,1,2},
 {3,0,1,2,4,5},{5,2,3,4,0,1},{4,1,2,3,5,0},{1,5,4,0,2,3},{2,0,5,1,3,4},
 {0,4,3,5,1,2},{3,1,0,2,4,5},{5,3,2,4,0,1},{4,2,1,3,5,0},{1,0,4,5,2,3},
 {2,1,5,0,3,4},{0,5,3,4,1,2},{3,2,0,1,4,5},{5,4,2,3,0,1},{4,3,1,2,5,0},
 {1,2,0,5,3,4},{2,3,1,0,4,5},{0,1,5,4,2,3},{3,4,2,1,5,0},{5,0,4,3,1,2},
 {4,5,3,2,0,1},{1,3,0,5,2,4},{2,4,1,0,3,5},{0,2,5,4,1,3},{3,5,2,1,4,0},
 {5,1,4,3,0,2},{4,0,3,2,5,1},{1,4,0,5,2,3},{2,5,1,0,3,4},{0,3,5,4,1,2},
 {3,0,2,1,4,5},{5,2,4,3,0,1},{4,1,3,2,5,0},{1,5,0,4,2,3},{2,0,1,5,3,4},
 {0,4,5,3,1,2},{3,1,2,0,4,5},{5,3,4,2,0,1},{4,2,3,1,5,0},{1,0,5,4,2,3},
 {2,1,0,5,3,4},{0,5,4,3,1,2},{3,2,1,0,4,5},{5,4,3,2,0,1},{4,3,2,1,5,0},
 {1,2,3,4,0,5},{2,3,4,5,1,0},{0,1,2,3,5,4},{3,4,5,0,2,1},{5,0,1,2,4,3},
 {4,5,0,1,3,2},{1,3,2,4,0,5},{2,4,3,5,1,0},{0,2,1,3,5,4},{3,5,4,0,2,1},
 {5,1,0,2,4,3},{4,0,5,1,3,2},{1,4,2,3,0,5},{2,5,3,4,1,0},{0,3,1,2,5,4},
 {3,0,4,5,2,1},{5,2,0,1,4,3},{4,1,5,0,3,2},{1,5,2,3,0,4},{2,0,3,4,1,5},
 {0,4,1,2,5,3},{3,1,4,5,2,0},{5,3,0,1,4,2},{4,2,5,0,3,1},{1,0,2,3,5,4},
 {2,1,3,4,0,5},{0,5,1,2,4,3},{3,2,4,5,1,0},{5,4,0,1,3,2},{4,3,5,0,2,1},
 {1,2,4,3,0,5},{2,3,5,4,1,0},{0,1,3,2,5,4},{3,4,0,5,2,1},{5,0,2,1,4,3},
 {4,5,1,0,3,2},{1,3,4,2,0,5},{2,4,5,3,1,0},{0,2,3,1,5,4},{3,5,0,4,2,1},
 {5,1,2,0,4,3},{4,0,1,5,3,2},{1,4,3,2,0,5},{2,5,4,3,1,0},{0,3,2,1,5,4},
 {3,0,5,4,2,1},{5,2,1,0,4,3},{4,1,0,5,3,2},{1,5,3,2,0,4},{2,0,4,3,1,5},
 {0,4,2,1,5,3},{3,1,5,4,2,0},{5,3,1,0,4,2},{4,2,0,5,3,1},{1,0,3,2,5,4},
 {2,1,4,3,0,5},{0,5,2,1,4,3},{3,2,5,4,1,0},{5,4,1,0,3,2},{4,3,0,5,2,1},
 {1,2,5,3,0,4},{2,3,0,4,1,5},{0,1,4,2,5,3},{3,4,1,5,2,0},{5,0,3,1,4,2},
 {4,5,2,0,3,1},{1,3,5,2,0,4},{2,4,0,3,1,5},{0,2,4,1,5,3},{3,5,1,4,2,0},
 {5,1,3,0,4,2},{4,0,2,5,3,1},{1,4,5,2,0,3},{2,5,0,3,1,4},{0,3,4,1,5,2},
 {3,0,1,4,2,5},{5,2,3,0,4,1},{4,1,2,5,3,0},{1,5,4,2,0,3},{2,0,5,3,1,4},
 {0,4,3,1,5,2},{3,1,0,4,2,5},{5,3,2,0,4,1},{4,2,1,5,3,0},{1,0,4,2,5,3},
 {2,1,5,3,0,4},{0,5,3,1,4,2},{3,2,0,4,1,5},{5,4,2,0,3,1},{4,3,1,5,2,0},
 {1,2,0,3,5,4},{2,3,1,4,0,5},{0,1,5,2,4,3},{3,4,2,5,1,0},{5,0,4,1,3,2},
 {4,5,3,0,2,1},{1,3,0,2,5,4},{2,4,1,3,0,5},{0,2,5,1,4,3},{3,5,2,4,1,0},
 {5,1,4,0,3,2},{4,0,3,5,2,1},{1,4,0,2,5,3},{2,5,1,3,0,4},{0,3,5,1,4,2},
 {3,0,2,4,1,5},{5,2,4,0,3,1},{4,1,3,5,2,0},{1,5,0,2,4,3},{2,0,1,3,5,4},
 {0,4,5,1,3,2},{3,1,2,4,0,5},{5,3,4,0,2,1},{4,2,3,5,1,0},{1,0,5,2,4,3},
 {2,1,0,3,5,4},{0,5,4,1,3,2},{3,2,1,4,0,5},{5,4,3,0,2,1},{4,3,2,5,1,0},
 {1,2,3,5,0,4},{2,3,4,0,1,5},{0,1,2,4,5,3},{3,4,5,1,2,0},{5,0,1,3,4,2},
 {4,5,0,2,3,1},{1,3,2,5,0,4},{2,4,3,0,1,5},{0,2,1,4,5,3},{3,5,4,1,2,0},
 {5,1,0,3,4,2},{4,0,5,2,3,1},{1,4,2,5,0,3},{2,5,3,0,1,4},{0,3,1,4,5,2},
 {3,0,4,1,2,5},{5,2,0,3,4,1},{4,1,5,2,3,0},{1,5,2,4,0,3},{2,0,3,5,1,4},
 {0,4,1,3,5,2},{3,1,4,0,2,5},{5,3,0,2,4,1},{4,2,5,1,3,0},{1,0,2,4,5,3},
 {2,1,3,5,0,4},{0,5,1,3,4,2},{3,2,4,0,1,5},{5,4,0,2,3,1},{4,3,5,1,2,0},
 {1,2,4,5,0,3},{2,3,5,0,1,4},{0,1,3,4,5,2},{3,4,0,1,2,5},{5,0,2,3,4,1},
 {4,5,1,2,3,0},{1,3,4,5,0,2},{2,4,5,0,1,3},{0,2,3,4,5,1},{3,5,0,1,2,4},
 {5,1,2,3,4,0},{4,0,1,2,3,5},{1,4,3,5,0,2},{2,5,4,0,1,3},{0,3,2,4,5,1},
 {3,0,5,1,2,4},{5,2,1,3,4,0},{4,1,0,2,3,5},{1,5,3,4,0,2},{2,0,4,5,1,3},
 {0,4,2,3,5,1},{3,1,5,0,2,4},{5,3,1,2,4,0},{4,2,0,1,3,5},{1,0,3,4,5,2},
 {2,1,4,5,0,3},{0,5,2,3,4,1},{3,2,5,0,1,4},{5,4,1,2,3,0},{4,3,0,1,2,5},
 {1,2,5,4,0,3},{2,3,0,5,1,4},{0,1,4,3,5,2},{3,4,1,0,2,5},{5,0,3,2,4,1},
 {4,5,2,1,3,0},{1,3,5,4,0,2},{2,4,0,5,1,3},{0,2,4,3,5,1},{3,5,1,0,2,4},
 {5,1,3,2,4,0},{4,0,2,1,3,5},{1,4,5,3,0,2},{2,5,0,4,1,3},{0,3,4,2,5,1},
 {3,0,1,5,2,4},{5,2,3,1,4,0},{4,1,2,0,3,5},{1,5,4,3,0,2},{2,0,5,4,1,3},
 {0,4,3,2,5,1},{3,1,0,5,2,4},{5,3,2,1,4,0},{4,2,1,0,3,5},{1,0,4,3,5,2},
 {2,1,5,4,0,3},{0,5,3,2,4,1},{3,2,0,5,1,4},{5,4,2,1,3,0},{4,3,1,0,2,5},
 {1,2,0,4,5,3},{2,3,1,5,0,4},{0,1,5,3,4,2},{3,4,2,0,1,5},{5,0,4,2,3,1},
 {4,5,3,1,2,0},{1,3,0,4,5,2},{2,4,1,5,0,3},{0,2,5,3,4,1},{3,5,2,0,1,4},
 {5,1,4,2,3,0},{4,0,3,1,2,5},{1,4,0,3,5,2},{2,5,1,4,0,3},{0,3,5,2,4,1},
 {3,0,2,5,1,4},{5,2,4,1,3,0},{4,1,3,0,2,5},{1,5,0,3,4,2},{2,0,1,4,5,3},
 {0,4,5,2,3,1},{3,1,2,5,0,4},{5,3,4,1,2,0},{4,2,3,0,1,5},{1,0,5,3,4,2},
 {2,1,0,4,5,3},{0,5,4,2,3,1},{3,2,1,5,0,4},{5,4,3,1,2,0},{4,3,2,0,1,5},
 {1,2,3,0,5,4},{2,3,4,1,0,5},{0,1,2,5,4,3},{3,4,5,2,1,0},{5,0,1,4,3,2},
 {4,5,0,3,2,1},{1,3,2,0,5,4},{2,4,3,1,0,5},{0,2,1,5,4,3},{3,5,4,2,1,0},
 {5,1,0,4,3,2},{4,0,5,3,2,1},{1,4,2,0,5,3},{2,5,3,1,0,4},{0,3,1,5,4,2},
 {3,0,4,2,1,5},{5,2,0,4,3,1},{4,1,5,3,2,0},{1,5,2,0,4,3},{2,0,3,1,5,4},
 {0,4,1,5,3,2},{3,1,4,2,0,5},{5,3,0,4,2,1},{4,2,5,3,1,0},{1,0,2,5,4,3},
 {2,1,3,0,5,4},{0,5,1,4,3,2},{3,2,4,1,0,5},{5,4,0,3,2,1},{4,3,5,2,1,0},
 {1,2,4,0,5,3},{2,3,5,1,0,4},{0,1,3,5,4,2},{3,4,0,2,1,5},{5,0,2,4,3,1},
 {4,5,1,3,2,0},{1,3,4,0,5,2},{2,4,5,1,0,3},{0,2,3,5,4,1},{3,5,0,2,1,4},
 {5,1,2,4,3,0},{4,0,1,3,2,5},{1,4,3,0,5,2},{2,5,4,1,0,3},{0,3,2,5,4,1},
 {3,0,5,2,1,4},{5,2,1,4,3,0},{4,1,0,3,2,5},{1,5,3,0,4,2},{2,0,4,1,5,3},
 {0,4,2,5,3,1},{3,1,5,2,0,4},{5,3,1,4,2,0},{4,2,0,3,1,5},{1,0,3,5,4,2},
 {2,1,4,0,5,3},{0,5,2,4,3,1},{3,2,5,1,0,4},{5,4,1,3,2,0},{4,3,0,2,1,5},
 {1,2,5,0,4,3},{2,3,0,1,5,4},{0,1,4,5,3,2},{3,4,1,2,0,5},{5,0,3,4,2,1},
 {4,5,2,3,1,0},{1,3,5,0,4,2},{2,4,0,1,5,3},{0,2,4,5,3,1},{3,5,1,2,0,4},
 {5,1,3,4,2,0},{4,0,2,3,1,5},{1,4,5,0,3,2},{2,5,0,1,4,3},{0,3,4,5,2,1},
 {3,0,1,2,5,4},{5,2,3,4,1,0},{4,1,2,3,0,5},{1,5,4,0,3,2},{2,0,5,1,4,3},
 {0,4,3,5,2,1},{3,1,0,2,5,4},{5,3,2,4,1,0},{4,2,1,3,0,5},{1,0,4,5,3,2},
 {2,1,5,0,4,3},{0,5,3,4,2,1},{3,2,0,1,5,4},{5,4,2,3,1,0},{4,3,1,2,0,5},
 {1,2,0,5,4,3},{2,3,1,0,5,4},{0,1,5,4,3,2},{3,4,2,1,0,5},{5,0,4,3,2,1},
 {4,5,3,2,1,0},{1,3,0,5,4,2},{2,4,1,0,5,3},{0,2,5,4,3,1},{3,5,2,1,0,4},
 {5,1,4,3,2,0},{4,0,3,2,1,5},{1,4,0,5,3,2},{2,5,1,0,4,3},{0,3,5,4,2,1},
 {3,0,2,1,5,4},{5,2,4,3,1,0},{4,1,3,2,0,5},{1,5,0,4,3,2},{2,0,1,5,4,3},
 {0,4,5,3,2,1},{3,1,2,0,5,4},{5,3,4,2,1,0},{4,2,3,1,0,5},{1,0,5,4,3,2},
 {2,1,0,5,4,3},{0,5,4,3,2,1},{3,2,1,0,5,4},{5,4,3,2,1,0},{4,3,2,1,0,5}};
#endif
